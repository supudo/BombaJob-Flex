<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		skinClass="skins.BJSkin"
		title="Offers"
		actionBarVisible="false"
		creationComplete="offersView_creationCompleteHandler(event)"
		updateComplete="offersView_updateCompleteHandler(event)"
		viewActivate="offersView_viewActivateHandler(event)">
	
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import database.Database;
			import database.DatabaseResponder;
			
			import events.ViewEvent;
			
			import models.JobOfferModel;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.object_proxy;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			import utilities.AppSettings;
			import utilities.Funcs;
			
			private var dbHelper:Database;
			private var superViewJobs:SearchJobsView;
			private var superViewPeople:SearchPeopleView;
			private var humanYn:Boolean = false;
			private var categoryID:uint = 0;
			
			[Bindable]
			private var offersModel:JobOfferModel;
			
			protected function offersView_creationCompleteHandler(event:FlexEvent):void {
				this.addEventListener(ViewEvent.SearchJobsView, setNavData);
				this.addEventListener(ViewEvent.SearchPeopleView, setNavData);
				if (data != null) {
					this.categoryID = data.cid as uint;
					AppSettings.getInstance().logThis(this, "xxx creationComplete..." + this.categoryID);
				}
			}
			
			protected function offersView_updateCompleteHandler(event:FlexEvent):void {
				if (navigator.poppedViewReturnedObject != null) {
					var data:Object = navigator.poppedViewReturnedObject;
					if (data.object != null && data.object.superView != null && data.object.resetBar != null) {
						if (data.object.jobsYn) {
							this.superViewJobs = data.object.superView as views.SearchJobsView;
							if (data.object.resetBar)
								this.superViewJobs.setBar();
						}
						else {
							this.superViewPeople = data.object.superView as views.SearchPeopleView;
							if (data.object.resetBar)
								this.superViewPeople.setBar();
						}
					}
				}
				this.title = resourceManager.getString('resources','menu_Offers');
			}
			
			protected function offersView_viewActivateHandler(event:ViewNavigatorEvent):void {
				this.loadItems(null);
			}
			
			public function loadItems(event:Event):void {
				this.offersModel = JobOfferModel.getInstance();
				this.dbHelper = AppSettings.getInstance().dbHelper;

				var offs:Array = null;
				if (this.categoryID > 0)
					offs = this.dbHelper.getJobOffersComplex(this.humanYn, this.categoryID);
				else
					offs = this.dbHelper.getJobOfferForHuman(this.humanYn);

				if (offs != null) {
					var f:Funcs = new Funcs();
					
					if (this.offersModel.items == null)
						this.offersModel.items = new ArrayCollection();
					else
						this.offersModel.items.removeAll();

					var off:Object, obj:Object;
					var today:Date = new Date();
					for (var i:int=0; i<offs.length; i++) {
						off = offs[i];
						off.listtitle = f.getFullDate(off.publishdate as Date, today, false) + " // " + off.title;
						this.offersModel.items.addItem(off);
					}
				}
			}

			private function setNavData(event:ViewEvent):void {
				this.superViewJobs = null;
				this.superViewPeople = null;
				this.humanYn = true;
				if (event.type == "SearchJobsView") {
					this.humanYn = false;
					this.superViewJobs = event.result as SearchJobsView;
				}
				else if (event.type == "SearchPeopleView")
					this.superViewPeople = event.result as SearchPeopleView;
				this.loadItems(null);
			}
			
			protected function listOffers_changeHandler(event:IndexChangeEvent):void {
				this.tabBarVisible = false;
				var o:Object = new Object();
				o.itemObject = this.listOffers.selectedItem;
				o.showActionBar = false;
				o.superView = ((this.superViewJobs == null) ? this.superViewPeople : this.superViewJobs);
				o.jobsYn = ((this.superViewJobs == null) ? false : true);
				navigator.pushView(OfferDetailsView, o);
			}
			
		]]>
	</fx:Script>
	
	<fx:Style>
		.nofItem { fontStyle: italic; color: #DF9368; }
	</fx:Style>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:List id="listOffers" width="100%" height="100%" dataProvider="{offersModel.items}"
			alternatingItemColors="[0xE3E3E3, 0xEBEBEC]"
			change="listOffers_changeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer labelField="listtitle" messageField="categorytitle" messageStyleName="nofItem" />
			</fx:Component>
		</s:itemRenderer>
	</s:List>
	
</s:View>
