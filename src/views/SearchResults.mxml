<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		skinClass="skins.BJSkin"
		title="SearchResults"
		viewActivate="searchResults_viewActivateHandler(event)">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import models.JobOfferModel;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			import utilities.Funcs;
			
			[Bindable]
			private var offersModel:JobOfferModel;
			
			private var searchQuery:String = "";
			private var searchFreelance:int = 0;
			
			override public function createReturnObject():Object {
				var returnedObject:Object = new Object();
				returnedObject.searchQuery = this.searchQuery;
				returnedObject.searchFreelance = this.searchFreelance;
				return returnedObject;
			}

			protected function searchResults_viewActivateHandler(event:ViewNavigatorEvent):void {
				this.title = resourceManager.getString('resources','menu_SearchResults');
				
				if (data != null && data.offs != null) {
					var f:Funcs = new Funcs();
					this.offersModel = JobOfferModel.getInstance();

					this.searchQuery = data.searchQuery;
					this.searchFreelance = data.searchFreelance;
					
					this.offersModel.items = new ArrayCollection();
					var off:Object, obj:Object;
					var today:Date = new Date();
					for (var i:int=0; i<data.offs.length; i++) {
						off = data.offs[i];
						off.listtitle = f.getFullDate(off.publishdate as Date, today, false) + " // " + off.title;
						this.offersModel.items.addItem(off);
					}
				}
			}
			
			protected function searchResults_changeHandler(event:IndexChangeEvent):void {
				var o:Object = new Object();
				o.itemObject = this.listSearchResults.selectedItem;
				o.showActionBar = true;
				navigator.pushView(OfferDetailsView, o);
			}
			
			protected function btnBack_clickHandler(event:MouseEvent):void {
				navigator.popView();
			}
		]]>
	</fx:Script>
	
	<fx:Style>
		.nofItem { fontStyle: italic; color: #DF9368; }
	</fx:Style>
	
	<s:navigationContent>
		<s:Button icon="@Embed('assets/images/action-back.png')" click="btnBack_clickHandler(event)" />
	</s:navigationContent>
	
	<s:List  id="listSearchResults" width="100%" height="100%" dataProvider="{offersModel.items}"
			 alternatingItemColors="[0xE3E3E3, 0xEBEBEC]"
			 change="searchResults_changeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer labelField="listtitle" messageField="categorytitle"
									iconFunction="getIcon" iconHeight="21" iconWidth="35"
									messageStyleName="nofItem">
					<fx:Script>
						<![CDATA[
							[Embed(source = "assets/images/iconperson.png")]
							public var iconPerson:Class;
							
							[Embed(source = "assets/images/iconcompany.png")]
							public var iconCompany:Class;
							
							private function getIcon(item:Object):Class {
								return item.humanyn ? iconPerson : iconCompany;   
							}
						]]>
					</fx:Script>
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>
</s:View>
