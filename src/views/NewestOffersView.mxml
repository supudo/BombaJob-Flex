<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		skinClass="skins.BJSkin"
		title="Newest Offers"
		creationComplete="newestOffersView_creationCompleteHandler(event)"
		viewActivate="newestOffersView_viewActivateHandler(event)">

	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>

	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata> 

	<fx:Script>
		<![CDATA[
			import models.JobOfferModel;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			
			import utilities.AppSettings;
			import utilities.Funcs;
			
			[Bindable]
			private var offersModel:JobOfferModel;
			
			protected function newestOffersView_creationCompleteHandler(event:FlexEvent):void {
				this.title = resourceManager.getString('resources','menu_NewestOffers');
				this.addEventListener("syncComplete", loadItems);
			}
			
			protected function newestOffersView_viewActivateHandler(event:ViewNavigatorEvent):void {
				this.loadItems(null);
			}

			public function loadItems(event:Event):void {
				if (AppSettings.getInstance().dbHelper != null) {
					this.offersModel = JobOfferModel.getInstance();
					var offs:Array = AppSettings.getInstance().dbHelper.getJobOffers();
					
					if (offs != null) {
						this.removeEventListener("syncComplete", loadItems);
						var f:Funcs = new Funcs();
						
						if (this.offersModel.items == null) {
							this.offersModel.items = new ArrayCollection();
							var off:Object, obj:Object;
							var today:Date = new Date();
							for (var i:int=0; i<offs.length; i++) {
								off = offs[i];
								off.listtitle = f.getFullDate(off.publishdate as Date, today, false) + " // " + off.title;
								this.offersModel.items.addItem(off);
							}
						}
					}
				}
			}
			
			protected function listNewestOffers_changeHandler(event:IndexChangeEvent):void {
				var o:Object = new Object();
				o.itemObject = this.listNewestOffers.selectedItem;
				o.showActionBar = true;
				navigator.pushView(OfferDetailsView, o);
			}
			
		]]>
	</fx:Script>
	
	<fx:Style>
		.nofItem { fontStyle: italic; color: #DF9368; }
	</fx:Style>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:List  id="listNewestOffers" width="100%" height="100%" dataProvider="{offersModel.items}"
			 alternatingItemColors="[0xE3E3E3, 0xEBEBEC]"
			 change="listNewestOffers_changeHandler(event)">
		<s:itemRenderer>
			<fx:Component>
				<s:IconItemRenderer labelField="listtitle" messageField="categorytitle"
									iconFunction="getIcon" iconHeight="21" iconWidth="35"
									messageStyleName="nofItem">
					<fx:Script>
						<![CDATA[
							[Embed(source = "assets/images/iconperson.png")]
							public var iconPerson:Class;
							
							[Embed(source = "assets/images/iconcompany.png")]
							public var iconCompany:Class;

							private function getIcon(item:Object):Class {
								return item.humanyn ? iconPerson : iconCompany;   
							}
						]]>
					</fx:Script>
				</s:IconItemRenderer>
			</fx:Component>
		</s:itemRenderer>
	</s:List>

</s:View>
